{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>trestle-bot assists users in leveraging Compliance-Trestle in CI/CD workflows for OSCAL formatted compliance content management.</p> <p>WARNING: This project is currently under initial development. APIs may be changed incompatibly from one commit to another.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#available-commands","title":"Available Commands","text":"<p>The <code>autosync</code> command will sync trestle-generated Markdown files to OSCAL JSON files in a trestle workspace. All content under the provided markdown directory when the action is run will be transformed. This action supports all top-level models supported by compliance-trestle for authoring.</p> <p>The <code>rules-transform</code> command can be used when managing OSCAL Component Definitions in a trestle workspace. The action will transform rules defined in the rules YAML view to an OSCAL Component Definition JSON file.</p> <p>The <code>create-cd</code> command can be used to create a new OSCAL Component Definition in a trestle workspace. The action will create a new Component Definition JSON file and corresponding directories that contain rules YAML files and trestle-generated Markdown files. This action prepares the workspace for use with the <code>rules-transform</code> and <code>autosync</code> actions.</p> <p>The <code>sync-upstreams</code> command can be used to sync and validate upstream OSCAL content stored in a git repository to a local trestle workspace. Which content is synced is determined by the <code>include_model_names</code> and <code>exclude_model_names</code> inputs.</p> <p>The <code>create-ssp</code> command can be used to create a new OSCAL System Security Plans (SSP) in a trestle workspace. The action will create a new SSP JSON file and corresponding directories that contain trestle-generated Markdown files. This action prepares the workspace for use with the <code>autosync</code> action by creating or updating the <code>ssp-index.json</code> file. The <code>ssp-index.json</code> file is used to track the relationships between the SSP and the other OSCAL content in the workspace for the <code>autosync</code> action.</p> <p>The <code>sync-cac-content</code> command can be used to create or update an OSCAL Catalog (Catalog), an OSCAL Profile (Component Definition), or an OSCAL Component Definition (Component Definition) in a trestle workspace, based on SSG content.</p> <p>Below is a table of the available commands and their current availability as a GitHub Action:</p> Command Available as a GitHub Action <code>autosync</code> \u2713 <code>rules-transform</code> \u2713 <code>create-cd</code> \u2713 <code>sync-upstreams</code> \u2713 <code>create-ssp</code> <code>sync-cac-content</code> <p>For detailed documentation on how to use each action, see the README.md in each folder under actions.</p>"},{"location":"#supported-git-providers","title":"Supported Git Providers","text":"<p>Note: Only applicable if using <code>trestle-bot</code> to create pull requests. Automatically detecting the git provider information is supported for GitHub Actions (GitHub) and GitLab CI (GitLab).</p> <ul> <li>GitHub</li> <li>GitLab</li> </ul>"},{"location":"#run-as-a-container","title":"Run as a Container","text":"<p>Note: When running the commands in a container, all are prefixed with <code>trestlebot</code> (e.g. <code>trestlebot-autosync</code>). The default entrypoint for the container is the autosync command.</p> <p>Build and run the container locally:</p> <pre><code>podman build -f Dockerfile -t trestle-bot .\npodman run -v $(pwd):/data -w /data trestle-bot\n</code></pre> <p>Container images are available in <code>quay.io</code>:</p> <pre><code>podman run -v $(pwd):/data -w /data quay.io/continuouscompliance/trestle-bot:&lt;tag&gt;\n</code></pre>"},{"location":"contributing/","title":"Contributing to trestlebot","text":"<p>Thank you for your interest in the trestlebot project.</p> <p>Before you start contributing, please take a moment to read through the guide below.</p> <p>WARNING: This project is currently under initial development. APIs may be changed incompatibly from one commit to another.</p> <ul> <li>Contributing to trestlebot</li> <li>How To Contribute</li> <li>Opening a Pull Request</li> <li>Developer Guide<ul> <li>Prerequisites</li> <li>Development Environment</li> <li>How It Works</li> <li>Components</li> <li>Code structure</li> <li>Documentation</li> <li>Architecture Decisions</li> <li>Update the <code>actions</code> files</li> <li>Authoring CI Workflows</li> <li>License Text in Files</li> <li>Tools</li> <li>Format and Styling</li> <li>Type Hints and Static Type Checking</li> <li>Analysis Tools</li> <li>Running tests</li> <li>Running tests with make</li> <li>Run with poetry</li> <li>Local testing</li> <li>Release Process</li> </ul> </li> </ul>"},{"location":"contributing/#how-to-contribute","title":"How To Contribute","text":"<p>Some initial contributions could be:</p> <ul> <li>Improving the documentation</li> <li>Adding test coverage</li> <li>Try out issues that have the label <code>good first issue</code></li> <li>Opening an issue for bugs or feature requests</li> </ul>"},{"location":"contributing/#opening-a-pull-request","title":"Opening a Pull Request","text":"<p>When submitting a pull request, please follow these guidelines:</p> <ol> <li>Ensure that you have an issue submitted first and reference it in your pull request.</li> <li>Ensure that your code passes all CI tests.</li> <li>Please keep the pull request focused on a single issue or feature, if possible.</li> </ol>"},{"location":"contributing/#developer-guide","title":"Developer Guide","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python - v3.8+</li> <li>Poetry</li> <li>Podman (Optional) - For testing locally and end-to-end tests</li> </ul>"},{"location":"contributing/#development-environment","title":"Development Environment","text":"<p>For a reproducible development environment, we use Dev Containers. See devcontainer.json for more information. Note that this does not include the <code>podman</code> installation to avoid the requirement for containers with elevated privileges.</p>"},{"location":"contributing/#how-it-works","title":"How It Works","text":"<p>For workflow diagrams, see the diagrams under the <code>docs</code> folder.</p>"},{"location":"contributing/#components","title":"Components","text":"<ol> <li>CI Provider - Runs or builds and runs trestle-bot container</li> <li>Trestle Bot - Provides logic for managing workspace and containerized environment for use in workflows</li> <li>Compliance-Trestle - Upstream library that provides core logic for how OSCAL content is managed</li> </ol>"},{"location":"contributing/#code-structure","title":"Code structure","text":"<ul> <li><code>actions</code> - Provides specific logic for <code>trestle-bot</code> tasks that are packaged as Actions. See README.md for more information.</li> <li><code>cli</code> - Provides top level logic for specific user-facing tasks. These tasks are not necessarily related so they are not organized into a hierarchical command structure, but they do share some common modules.</li> <li><code>cli/commands</code> - Provides top level logic for commands and their associated subcommands. The commands are accessed by the single entrypoint <code>root.py</code>.</li> <li><code>cli/options</code> - Provides command line options and arguments that are frequently used within <code>cli/commands</code>.</li> <li><code>provider.py, github.py, and gitlab.py</code> - Git provider abstract class and concrete implementations for interacting with the API.</li> <li><code>tasks</code> - Pre-tasks can be configured before the main git logic is run. Any task that does workspace management should go here.</li> <li><code>tasks/authored</code> - The <code>authored</code> package contains logic for managing authoring tasks for single instances of a top-level OSCAL model. These encapsulate logic from the <code>compliance-trestle</code> library and allows loose coupling between <code>tasks</code> and <code>authored</code> types.</li> <li><code>transformers</code> - This contains data transformation logic; specifically for rules.</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#architecture-decisions","title":"Architecture Decisions","text":"<p>We document decisions using Architectural Decision Records. The team will decide when an ADR will be put in place, but this is generally done to document impactful architectural decisions.</p> <ul> <li>Create an instance of the ADR template using <code>trestle author docs create-sample -tn decisions -tr docs/architecture</code>.</li> <li>This can be tested locally via <code>trestle author docs validate --task-name decisions -hv -tr docs/architecture</code></li> </ul>"},{"location":"contributing/#update-the-actions-files","title":"Update the <code>actions</code> files","text":"<p>Each <code>README.md</code> under the <code>actions</code> directory have an Actions Inputs and Action Outputs section. These sections are generated from the <code>action.yml</code> file in the directory. To update the <code>README.md</code> files, run the following command:</p> <pre><code>make update-action-readmes\n</code></pre>"},{"location":"contributing/#authoring-ci-workflows","title":"Authoring CI Workflows","text":"<p>The CI workflows for trestle-bot leverage third party actions pinned to a hash value which is updated by <code>dependabot.yml</code>. The purpose of pinning actions to a full length commit SHA is to ensure that the action's code and behavior remain consistent. Actions that are pinned to full length commit SHAs act as immutable releases which allow for distinction between versions and an accurate history log. When selecting a commit SHA to include, the SHA value that is associated with the version of the action should be chosen from the associated action's repository. Dependabot checks for the action's reference against the latest version ensuring a secure and consistent approach to managing dependencies and version updating.</p> <p>To generate a pin for a third party action, there should be a full length commit SHA associated with the version of the action being referenced. The reference used is the full length SHA, tag, or branch that dependabot will use when updating dependencies and bumping versions.</p> <ul> <li>The syntax for a specified action is: <code>OWNER/REPOSITORY@TAG-OR-SHA</code>.</li> <li>The syntax for a specified reusable workflow is: <code>OWNER/REPOSITORY/PATH/FILENAME@TAG-OR-SHA</code>.</li> </ul> <p>This approach is used for authoring CI workflows that utilize versioned actions to produce frequent updates from dependabot for python and GitHub Actions.</p>"},{"location":"contributing/#license-text-in-files","title":"License Text in Files","text":"<p>Please use the SPDX license identifier in all source files.</p> <pre><code># SPDX-License-Identifier: Apache-2.0\n</code></pre>"},{"location":"contributing/#tools","title":"Tools","text":""},{"location":"contributing/#format-and-styling","title":"Format and Styling","text":"<p>This project uses <code>black</code> and <code>isort</code> for formatting and <code>flake8</code> for linting. You can run these commands to format and lint your code. Linting checks can be run as a pre-commit hook and are verified in CI.</p> <pre><code>make format\nmake lint\n</code></pre> <p>For non-Python files, we use Megalinter to lint in a CI task. See megalinter.yaml for more information.</p>"},{"location":"contributing/#type-hints-and-static-type-checking","title":"Type Hints and Static Type Checking","text":"<p>We encourage the use of type hints in Python code to enhance readability, maintainability, and robustness of the codebase. Type hints serve as documentation and aid in catching potential errors during development. For static type analysis, we utilize <code>mypy</code>. Running <code>make lint</code> will run <code>mypy</code> checks on the codebase.</p>"},{"location":"contributing/#analysis-tools","title":"Analysis Tools","text":"<ul> <li>SonarCloud - We use SonarCloud to analyze code quality, coverage, and security. To not break GitHub security model, this will not run on a forked repository.</li> <li>Semgrep - Identify issues in the local development environment before committing code. These checks are also run in CI.</li> </ul>"},{"location":"contributing/#running-tests","title":"Running tests","text":"<p>Run all tests with <code>make test</code> or <code>make test-slow</code> to run all tests including end-to-end. For information on end-to-end tests, see README.md.</p>"},{"location":"contributing/#running-tests-with-make","title":"Running tests with make","text":"<pre><code># Run all tests\nmake test\nmake test-slow\n\n# Run specific tests\nmake test-e2e\n</code></pre>"},{"location":"contributing/#run-with-poetry","title":"Run with poetry","text":"<pre><code>make develop\npoetry run trestlebot autosync\npoetry run trestlebot rules-transform\npoetry run trestlebot create compdef\npoetry run trestlebot sync-upstreams\npoetry run trestlebot create ssp\n</code></pre>"},{"location":"contributing/#local-testing","title":"Local testing","text":"<p>For this guide, we will be using <code>podman</code> to test trestlebot in a running container.</p> <ol> <li>Build the image</li> </ol> <pre><code>podman build -f Dockerfile -t localhost:5000/trestlebot:latest\n</code></pre> <ol> <li>Create an environment variables file if testing with the entrypoint script.</li> </ol> <p>The entrypoint script is where the logic for GitHub specific integrations should be. The environment variables file will contain variables set by GitHub Actions.</p> <p>Example file named <code>envfile</code></p> <p><pre><code>cat envfile\n...\n\nGITHUB_OUTPUT=\nINPUT_SKIP_ITEMS=\nINPUT_DRY_RUN=true\nINPUT_SKIP_ASSEMBLE=false\nINPUT_SKIP_REGENERATE=false\nINPUT_REPO_PATH=.\nINPUT_BRANCH=test\nINPUT_MARKDOWN_DIR=markdown/profiles\nINPUT_OSCAL_MODEL=profile\nINPUT_SSP_INDEX_FILE=\nINPUT_COMMIT_MESSAGE=\nINPUT_COMMIT_USER_NAME=testuser\nINPUT_COMMIT_USER_EMAIL=test@example.com\nINPUT_FILE_PATTERNS=*.md,*.json\nINPUT_COMMIT_AUTHOR_NAME=\nINPUT_COMMIT_AUTHOR_EMAIL=\nINPUT_TARGET_BRANCH=\nGITHUB_ACTIONS=true\n</code></pre> 3. Use <code>podman secret</code> to store sensitive information like API tokens</p> <pre><code>cat my-token.txt | podman secret create repo-secret -\n</code></pre> <ol> <li>Run the container</li> </ol> <pre><code>podman run --entrypoint /entrypoint.sh --secret repo-secret,type=env,target=TRESTLEBOT_REPO_ACCESS_TOKEN --env-file=envfile -v my-trestle-space:/data -w /data localhost:5000/trestlebot:latest\n</code></pre>"},{"location":"contributing/#local-github-actions","title":"Local GitHub actions","text":"<p>Podman setup</p> <ul> <li>The workflows can be executed locally by installing <code>act</code> and <code>podman</code>.</li> <li>For rootless podman to work with <code>act</code>:</li> <li>Enable the socket: <code>systemctl --user enable --now podman.socket</code></li> <li>Set the <code>DOCKER_HOST</code> environment variable in your ~/.bashrc:<ul> <li><code>export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock</code></li> </ul> </li> </ul> <p>Trestle repository setup</p> <ul> <li><code>cd</code> to the repository's parent directory</li> <li><code>git clone --bare trestle-repo trestle-repo-bare.git</code></li> <li><code>cd</code> back to the trestle repository</li> <li><code>git remote add origin ../trestle-repo-bare.git</code></li> <li><code>git fetch --all</code></li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Once work on a release has been completed:</p> <ol> <li>Select the new release number. Use the principles of semantic versioning to select the new release number.</li> <li>Follow the GitHub documentation on creating a release.</li> <li> <p>Once the release is published, the <code>publish</code> workflow will be triggered. An image will be built, tested, and published to <code>quay.io</code>. This process also signs and verifies the image with <code>cosign</code>.</p> </li> <li> <p>Initial releases will have a <code>major</code> tag (if stable), <code>major</code>.<code>minor</code>, and the full version.</p> </li> <li>The latest release will be rebuilt every thirty days to pull in base image updates. The same tags will be published with the addition of <code>full-version</code>.<code>date</code> tag.</li> <li>Images can be built adhoc for testing purposes with the <code>workflow_dispatch</code> trigger.</li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#action-does-not-commit-changes-back-to-the-correct-branch","title":"Action does not commit changes back to the correct branch","text":"<p>Verify the trigger you are using. The default branch is set to <code>github.ref_name</code>. If triggered on a pull request, you may notice this set to <code>pr-number/merge</code>. Set the branch field to <code>github.heaf_ref</code> which is set during pull request triggered workflows.</p>"},{"location":"troubleshooting/#action-does-not-have-permission-to-commitpull_request","title":"Action does not have permission to commit/pull_request","text":"<p>If your workflow requires that this action make changes to your branch, ensure the token being used has <code>content: write</code> permissions and the token is being set.</p> <pre><code>## Defaults to ${{ github.token }}\n- uses: actions/checkout@v3\n  with:\n    token: ${{ secrets.TOKEN }}\n</code></pre> <p>If your workflow requires that this action create a pull request (<code>target_branch</code> is set), ensure the token being used has <code>pull_request: write</code> permissions and the token is being set.</p> <pre><code># github_token has no default. \n# To use default token use ${{ secrets.GITHUB_TOKEN }}\n- uses: RedHatProductSecurity/trestle-bot@main\n  with:\n    markdown_path: \"markdown/profiles\"\n    assemble_model: \"profile\"\n    target_branch: \"main\"\n    github_token: ${{ secrets.TOKEN }}\n</code></pre> <p>Note: Using the GitHub token provided with GitHub Actions to commit to a branch will NOT trigger additional workflows.</p>"},{"location":"architecture/decisions/implement-cli-framework_001/","title":"ADR 001 - Implement CLI Framework","text":""},{"location":"architecture/decisions/implement-cli-framework_001/#context","title":"Context","text":"<p>The primary motivation for this ADR is to enhance the user experience by implementing a more robust CLI framework within the trestlebot codebase.   This will address the requirements of Issue #295 and Issue #342 and enable future development of more complex CLI scenarios.  Currently entrypoints leverage the argparse library as the core CLI framework.  However advanced patterns such as command chaining, subcommands, and dependencies between arguments can be difficult to implement.  Moving to the Click CLI framework will address these challenges and support more complex requirements in the future.  In addition, Click will provide a universal command syntax that can be used in the Python CLI app and container execution.</p> <p>This ADR also outlines the adoption of environment variables and a configuration file within the CLI.  These will provides alternatives methods of passing arguments to the CLI beyond just command flags.  This provides users with flexibility in how they pass arguments to the CLI and creates a more static option for arguments that tend to remain unchanged between command executions.</p>"},{"location":"architecture/decisions/implement-cli-framework_001/#decision","title":"Decision","text":"<p>The trestlebot module will be refactored to remove the use of <code>argparse</code> in favor of Click as the CLI framework.  The code contained in <code>entrypoints</code> will be converted into Click commands under the <code>trestlebot</code> CLI application.  A new <code>cli.py</code> module will be created as the main entrypoint.</p> <p>In addition, support will be added for using a configuration file and environment variables as CLI inputs.  The CLI will prioritize arguments passed as command flags.  If no argument is passed, the CLI will check for an environment variable.  Finally, if no enviroment variable is found, it will look to the configuration file.  Click natively supports loading command arguments from environment variables, including a constant prefix.  All environment variables will have a <code>TRESTLEBOT_</code> prefix.</p> <p>The configuration file will be broken into two primary categories, <code>global</code> and <code>model specific</code>.  Global configuration will apply across all models and include values such as git provider, markdown directories, etc.  Model specific configuration will apply to the given OSCAL model only.  While it is expected that most repos will be used for authoring a single OSCAL model, the possiblity of authoring more than one model would be supported.</p> <p>The configuration file would be initialized at a default location during the <code>trestlebot init</code> command.  Manual creation and editing is also possible.  The path to the configuration file can be passed using the <code>--config | -c</code> flag.  This would not be required if using the default file location. </p> <p>Default behaviors: - the default configuration file location will be <code>.trestlebot/config.yaml</code> - if a command only supports a single OSCAL model then <code>--oscal-model</code> will default to that value.  (ex: <code>rules-transform</code> only supports compdef) - if the config file only contains a single OSCAL model then that will be used as the default value for <code>--oscal-model</code></p>"},{"location":"architecture/decisions/implement-cli-framework_001/#example-config","title":"Example config:","text":"<pre><code>---\nversion: 1\nworking-dir: \".\"\nupstream-sources: [&lt;url&gt;]\nssp-index-path: ssp-index.json\ngit-provider-type: github\ngit-provider-url: github.com\ngit-committer-name: \"Foo Bar\"\ngit-committer-email: foo@bar.com\nmodels:\n  # we could allow for multiple or keep this as one\n  - oscal-model: ssp\n    markdown-path: markdown/system-security-plans\n    skip-items: [...]\n    skip-assemble: true\n  - oscal-model: compdef\n    markdown-path: markdown/component-definitions\n    skip-items: [...]\n    skip-assemble: true\n</code></pre>"},{"location":"architecture/decisions/implement-cli-framework_001/#consequences","title":"Consequences","text":"<ul> <li>The existing command syntax will be updated to evolve from a set of independent entrypoint commants to a unified <code>trestlebot</code> CLI with multiple \"subcommands\".  For example, <code>trestlebot-autosync &lt;args&gt;</code> becomes <code>trestlebot autosync &lt;args&gt;</code>.</li> <li>The container entrypoints will be collapsed into a single entrypoint leveraging the Click CLI application.</li> <li>CLI command arguments will be passed via flags, environment variables, or configuration file.</li> </ul>"},{"location":"architecture/decisions/record-architecture-decisions_000/","title":"Record architecture decisions","text":""},{"location":"architecture/decisions/record-architecture-decisions_000/#context","title":"Context","text":"<p>We need to record the architectural decisions made on this project.</p>"},{"location":"architecture/decisions/record-architecture-decisions_000/#decision","title":"Decision","text":"<p>We will use Architecture Decision Records, as described by Michael Nygard.</p>"},{"location":"architecture/decisions/record-architecture-decisions_000/#consequences","title":"Consequences","text":"<p>See Michael Nygard's article, linked above. <code>trestle</code> will be used to create and validate these decisions.</p>"},{"location":"architecture/diagrams/c4/","title":"Diagrams","text":""},{"location":"architecture/diagrams/c4/#context","title":"Context","text":"<pre><code>graph LR\n  subgraph External\n    User\n  end\n\n  subgraph Container\n    ContainerImage(\"Container Image\")\n    TrestlebotContainer(\"Trestlebot Container\")\n  end\n\n  subgraph GitHub\n    OSCALRepo(\"OSCAL Content Repository\")\n    GithubActions(\"GitHub Actions\")\n    CustomAction(\"Custom GitHub Action\")\n  end\n\n  User -- Uses --&gt; OSCALRepo\n  GithubActions -- Triggers --&gt; CustomAction\n  CustomAction -- Builds --&gt; ContainerImage\n  ContainerImage -- Runs --&gt; TrestlebotContainer\n  OSCALRepo -- Uses --&gt; GithubActions\n  User -- Uses --&gt; GithubActions</code></pre>"},{"location":"architecture/diagrams/c4/#container","title":"Container","text":"<pre><code>graph LR\n  subgraph Container\n    ContainerImage(\"Container Image\")\n    TrestlebotCLI(\"Trestlebot CLI\")\n  end\n  subgraph GitHub\n    GithubActions(\"GitHub Actions\")\n    CustomAction(\"Custom GitHub Action\")\n  end\n\n\n  GithubActions -- Triggers --&gt; CustomAction\n  CustomAction -- Builds --&gt; ContainerImage\n  ContainerImage -- Distributes --&gt; TrestlebotCLI</code></pre>"},{"location":"architecture/diagrams/c4/#component","title":"Component","text":"<pre><code>graph TD\n  subgraph Container\n    TrestlebotCLI(\"Trestlebot CLI\")\n    Entrypoint(\"Entrypoint script\")\n  end\n\n  subgraph Runtime\n    EnvironmentVariables(\"Environment Variables\")\n    GitRepo(\"Git Local Repository\")\n  end\n\n  subgraph GitHub\n    GitHubAction(\"GitHub Action\")\n    GitHubAPI(\"GitHub API\")\n  end\n\n  GitHubAction -- Sets --&gt; EnvironmentVariables\n  GitHubAction -- Uses --&gt; Entrypoint\n  TrestlebotCLI -- Reads content --&gt; GitRepo\n  Entrypoint -- Runs --&gt; TrestlebotCLI\n  Entrypoint -- Reads --&gt; EnvironmentVariables\n  TrestlebotCLI -- Update content --&gt; GitHubAPI</code></pre>"},{"location":"tutorials/authoring/","title":"Authoring Tutorial","text":"<p>This tutorial provides an overview of the authoring process using <code>trestlebot</code>.  We will use the component definition created in the GitHub tutorial as our starting point.  This tutorial will demonstrate the workflow for updating Markdown content and syncing those changes to OSCAL.</p>"},{"location":"tutorials/authoring/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>Complete the GitHub tutorial</li> </ul>"},{"location":"tutorials/authoring/#2-edit-in-markdown","title":"2. Edit in Markdown","text":"<p>We will begin where we left off at the end of the GitHub tutorial.  Our repository has a newly created component definition named <code>my-first-compdef</code> with corresponding content in the <code>markdown/</code> and <code>component-definitions/</code> directories.  We will now demonstrate how to author changes in Markdown and produce updated OSCAL content.</p> <ol> <li>Navigate to the <code>markdown/component-definitions/my-first-compdef/test-component/nist_rev5_800_53/ac</code> directory and select the <code>ac-1.md</code> file.</li> <li>Click the <code>Edit this file</code> (pencil) icon.</li> <li>Scroll down to the section titled <code>## What is the solution and how is it implemented?</code> and add a new line of text with a brief comment.  For example:</li> </ol> <pre><code>## What is the solution and how is it implemented?\n\nHere is where details should be added by the author.\n</code></pre> <ol> <li>Click the <code>Commit changes..</code> button</li> <li>Select the <code>Create a new branch for this commit and start a pull request</code> radio button</li> <li>Click <code>Propose changes</code></li> </ol> <p>The <code>Open a pull request</code> page now opens.  Enter any additional details about your changes into the description box.</p> <ol> <li>Click <code>Create pull request</code></li> <li>For demo purposes, we will go ahead and merge the pull request ourselves.  In a production setting the pull request process should be used for review, discussion and approval of the proposed changes.  Click <code>Merge pull request</code> and then <code>Confirm merge</code>.</li> </ol>"},{"location":"tutorials/authoring/#autosync","title":"Autosync","text":"<p>Once the pull request has been merged the <code>Trestle-bot rules-transform and autosync</code> GitHub action will be triggered. We will now validate that action was successful.</p> <ol> <li>Navigate to the <code>Actions</code> tab of your GitHub repository.</li> <li>The top entry in the list of workflow runs should be titled <code>Merge pull request #&lt;your PR number&gt; from &lt;your repo/your branch&gt;</code>.  This action should be either running or have just successfully completed.</li> <li>[Optional] Clicking this entry will allow you to view the detailed steps and log output.</li> <li>Once the action is completed successfully, navigate back to the source code by clicking the <code>Code</code> tab of the repo.</li> <li>Click the <code>component-definitions</code> folder and navigate to <code>my-first-compdef/component-definition.json</code>.</li> <li>The <code>Last commit date</code> should align with the time the action completed.</li> <li>Click the <code>component-definitions.json</code> file and then click the <code>History</code> icon to view the commit history.</li> <li>Ensure the latest commit performed by the GitHub action reflects the changes made in Markdown as shown below:</li> </ol> <pre><code>    \"description\": \"\",\n    \"description\": \"Here is where details should be added by the author\",\n</code></pre> <p>You will also notice the <code>\"last-modified\"</code> timestamp has been updated.</p> <p>Congrats!  You've successfully authored a change by modifying a Markdown file and letting trestle-bot sync those changes back to the OSCAL content.</p>"},{"location":"tutorials/github/","title":"GitHub Tutorial","text":"<p>This tutorial provides an introduction to using <code>trestlebot</code> with GitHub.  We will be using a single GitHub repository for our trestle authoring workspace and executing the <code>trestlebot</code> commands as GitHub actions.  Note, each repo is intended to support authoring a single OSCAL model type (SSP, component definition, etc.).  If authoring more than one OSCAL model type, then a dedicated repository should be used for each model.</p>"},{"location":"tutorials/github/#1-prerequisites","title":"1. Prerequisites","text":"<p>Before moving on, please ensure the following is completed:</p> <ol> <li>Create a new (or use an existing) empty GitHub repository</li> <li>Clone the repo to a local workstation</li> <li>Install trestlebot<ul> <li>Option 1: Clone the trestle-bot repo to a local workstation and run <code>poetry install</code></li> <li>Option 2: Use the trestlebot container image</li> </ul> </li> </ol>"},{"location":"tutorials/github/#2-set-permissions-for-github-actions","title":"2. Set Permissions for GitHub Actions","text":"<p>The <code>trestlebot</code> commands will be run inside of GitHub actions.  These commands often perform <code>write</code> level operations against the repo contents.  The GitHub workflows generated in this tutorial make use of automatic token authentication.  To ensure this is configured correct the following repo settings need to be in place.</p> <p>Note: If an alternative method is choosen to provide repo access, such as personal access tokens or GitHub apps, the following steps can be skipped.</p> <ol> <li>Click the <code>Settings</code> tab for your GitHub repo </li> <li>Select <code>Actions</code> -&gt; <code>General</code> from the left-hand menu</li> <li>Scroll down to <code>Workflow permissions</code></li> <li>Ensure <code>Read repository contents and packages permissions</code> is selected</li> <li>Ensure <code>Allow GitHub Actions to create and approve pull requests</code> is checked</li> </ol>"},{"location":"tutorials/github/#3-initialize-trestlebot-workspace","title":"3. Initialize trestlebot Workspace","text":"<p>The <code>trestlebot init</code> command will initialize the empty GitHub repository.  Unlike other trestlebot commands, this command is run on the local workstation.  The trestlebot commands can be installed by cloning the trestle-bot repo and running <code>poetry install</code>. Alternatively these commands can be run using the trestlebot container image.</p> <p>For this tutorial example, we will be authoring a component-definition.</p> <p>1a. Running trestlebot init using a locally installed trestlebot:</p> <pre><code>trestlebot init --repo-path &lt;path-to-your-repo&gt;\n</code></pre> <p>1b. Running trestlebot init using a trestle-bot container image:</p> <ul> <li>Note: latest image version tag can be found in the continuouscompliance repo on quay.io.</li> </ul> <pre><code>podman run -v &lt;path-to-your-repo&gt;:/data:rw  trestle-bot:&lt;tag&gt; --oscal-model compdef --working-dir /data\n</code></pre> <ul> <li> <p>If the local workstation is in SELinux enforcing mode and a permissions error occurs, then the following command should be used instead: <pre><code>podman run -v &lt;path-to-your-repo&gt;:/data:Z  trestle-bot:&lt;tag&gt; --oscal-model compdef --working-dir /data\n</code></pre></p> </li> <li> <p>Once the initiatization runs successfully, the following directories will be created within the local copy of the repository.</p> </li> </ul> <pre><code>.\n\u251c\u2500\u2500 assessment-plans\n\u251c\u2500\u2500 assessment-results\n\u251c\u2500\u2500 catalogs\n\u251c\u2500\u2500 component-definitions\n\u251c\u2500\u2500 markdown\n\u251c\u2500\u2500 plan-of-action-and-milestones\n\u251c\u2500\u2500 profiles\n\u2514\u2500\u2500 system-security-plans\n</code></pre> <ol> <li> <p>Any catalog or profile content needed for the authoring process can now be added.</p> </li> <li> <p>For this example, we will add the NIST SP 800-53 Rev. 5 catalog to our <code>/catalogs</code> directory.</p> </li> </ol> <pre><code>mkdir catalogs/nist_rev5_800_53\nwget https://raw.githubusercontent.com/usnistgov/oscal-content/release-v1.0.5-update/nist.gov/SP800-53/rev5/json/NIST_SP-800-53_rev5_catalog.json -O catalogs/nist_rev5_800_53/catalog.json\n</code></pre> <ul> <li>We will also add the NIST SP 800-53 Rev. 5 High Baseline profile to our <code>profiles/</code> directory.</li> </ul> <pre><code>mkdir profiles/nist_rev5_800_53\nwget https://raw.githubusercontent.com/usnistgov/oscal-content/release-v1.0.5-update/nist.gov/SP800-53/rev5/json/NIST_SP-800-53_rev5_HIGH-baseline_profile.json -O profiles/nist_rev5_800_53/profile.json\n</code></pre> <ol> <li>Our <code>profile.json</code> file contains a reference to our <code>catalog.json</code> file.  By default, this path is not resolvable by compliance-trestle, so we need to run the following command to update the <code>href</code> value in the JSON.</li> </ol> <pre><code>sed -i 's/NIST_SP-800-53_rev5_catalog.json/trestle:\\/\\/catalogs\\/nist_rev5_800_53\\/catalog.json/g' profiles/nist_rev5_800_53/profile.json\n</code></pre> <ol> <li> <p>Ready-made CI/CD workflows can be copied from the <code>TEMPLATES</code> directory within the upstream <code>trestle-bot</code> repository into the local trestle workspace. These are the trestlebot actions that will run as changes are made to the repo contents.</p> </li> <li> <p>If trestlebot init was run earlier using a trestle-bot container image, then the upstream trestle-bot repository will first need to be cloned locally into a separate directory. <pre><code>cd ..\ngit clone https://github.com/RedHatProductSecurity/trestle-bot.git\ncd ../&lt;trestle_workspace_repo&gt;\n</code></pre></p> </li> <li> <p>Copy the required template workflows from the separate <code>trestle-bot</code> repository into the new workspace repository. <pre><code>mkdir -p .github/workflows\ncp ../trestle-bot/TEMPLATES/github/trestlebot-create-component-definition.yml .github/workflows\ncp ../trestle-bot/TEMPLATES/github/trestlebot-rules-transform.yml .github/workflows\n</code></pre></p> </li> <li> <p>Trestle-bot initial content is now created locally within the new trestle authoring workspace. This content can now be pushed to the remote GitHub repository. <pre><code>git add .\ngit commit -m \"added example NIST SP 800-53 profile and component definition authoring workflow\"\ngit push\n</code></pre> Note: if this is the first git push to the remote GitHub repository, then use <code>git push -u origin main</code> rather than <code>git push</code>.</p> </li> </ol>"},{"location":"tutorials/github/#4-create-a-new-component-definition","title":"4. Create a New Component Definition","text":"<p>Now it's time to run our first trestlebot action within GitHub!  We will go ahead and create our first component definition.</p> <ol> <li>Open the new remote GitHub repository in a web browser.</li> <li>Click to the <code>Actions</code> tab from the top menu.</li> <li>Click the <code>Trestle-bot create component definition</code> action from the left-hand menu.</li> <li>Click <code>Run Workflow</code> which will open up a dialog box.</li> <li> <p>Enter the following values:</p> </li> <li> <p>Name of the Trestle profile to use for the component definition: <code>nist_rev5_800_53</code></p> </li> <li>Name of the component definition to create: <code>my-first-compdef</code></li> <li>Name of the component to create in the generated component definition: <code>test-component</code></li> <li>Type of the component (e.g. service, policy, physical, validation, etc.): <code>service</code></li> <li> <p>Description of the component to create: <code>Testing trestlebot init</code></p> </li> <li> <p>Click <code>Run Workflow</code></p> </li> </ol> <p>Once the workflow job has completed, there will be a new Pull Request containing the files trestlebot generated for the component definition.  After reviewing the committed changes, the Pull Request can then be merged into the main branch!</p> <p>Congratulations! We have successfully created a new trestlebot workspace and have an authoring environment!</p>"},{"location":"tutorials/sync-cac-content/","title":"The trestlebot command line sync-cac-content Tutorial","text":"<p>This tutorial provides how to use <code>trestlebot sync-cac-content</code> transform Cac content to OSCAL models. This command has two sub-commands <code>component-definition</code> and <code>profile</code></p>"},{"location":"tutorials/sync-cac-content/#component-definition","title":"component-definition","text":"<p>This command is to create OSCAL component definitions by transforming Cac content control files.</p> <p>The CLI performs the following transformations:</p> <ul> <li>Populate CaC product information to Oscal component title and description</li> <li>Ensure OSCAL component control mappings are populated with rule and rule parameter data from CaC control files</li> <li>Create a validation component from SSG rules to check mappings</li> <li>Ensure OSCAL Component Definition implemented requirements are populated from control notes in the control file</li> <li>Ensure implementation status of an implemented requirement in OSCAL component definitions are populated with the status from CaC control files</li> </ul>"},{"location":"tutorials/sync-cac-content/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li> <p>Initialize the trestlebot workspace.</p> </li> <li> <p>Pull the CacContent repository.</p> </li> </ul>"},{"location":"tutorials/sync-cac-content/#2-run-the-cli-sync-cac-content-component-definition","title":"2. Run the CLI sync-cac-content component-definition","text":"<pre><code>poetry run trestlebot sync-cac-content component-definition \\\n  --repo-path $trestlebot_workspace_directory \\\n  --branch main \\\n  --cac-content-root ~/content \\\n  --cac-profile $CacContentRepo/content/products/ocp4/profiles/high-rev-4.profile \\\n  --oscal-profile $OSCAL-profile-name \\\n  --committer-email test@redhat.com \\\n  --committer-name tester \\\n  --product $productname \\\n  --dry-run \\\n  --component-definition-type $type\n</code></pre> <p>For more details about these options and additional flags, you can use the --help flag: `poetry run trestlebot sync-cac-content component-definition --help' This will display a full list of available options and their descriptions.</p> <p>After run the CLI with the right options, you would successfully generate an OSCAL component definition under $trestlebot_workplace_directory/component-definitions/$product_name.</p>"},{"location":"tutorials/sync-cac-content/#profile","title":"profile","text":"<p>This command is to generate OSCAL profile according to content policy </p>"},{"location":"tutorials/sync-cac-content/#1-prerequisites_1","title":"1. Prerequisites","text":"<ul> <li> <p>Initialize the trestlebot workspace if you do not have one.</p> </li> <li> <p>Pull the CacContent repository.</p> </li> </ul>"},{"location":"tutorials/sync-cac-content/#2-run-the-cli-sync-cac-content-profile","title":"2. Run the CLI sync-cac-content profile","text":"<pre><code>poetry run trestlebot sync-cac-content profile \\ \n--repo-path ~/trestlebot-workspace \\\n--dry-run \\\n--cac-content-root ~/content \\\n--product ocp4 \\ \n--oscal-catalog nist_rev5_800_53 \\\n--policy-id nist_ocp4 \\ \n--committer-email test@redhat.com \\\n--committer-name test \\\n--branch main\n</code></pre> <p>For more details about these options and additional flags, you can use the --help flag: `poetry run trestlebot sync-cac-content profile --help' This will display a full list of available options and their descriptions.</p> <p>After run the CLI with the right options, you would successfully generate an OSCAL profile under $trestlebot_workplace_directory/profiles.</p>"},{"location":"workflows/assemble_diagrams/","title":"Diagrams: Assemble","text":""},{"location":"workflows/assemble_diagrams/#context","title":"Context","text":"<pre><code>graph LR\n    User[\"User\"] --&gt; Assemble_Workflow[\"Assemble Workflow\"]\n    Assemble_Workflow --&gt; Trestle_Bot[\"Trestle-Bot\"]\n    Trestle_Bot --&gt; Branch[\"User's Git Branch\"]</code></pre>"},{"location":"workflows/assemble_diagrams/#container","title":"Container","text":"<pre><code>graph LR\n    User[\"User\"] --&gt; GH_Action[\"GitHub Action\"]\n    GH_Action --&gt; Trestle_Bot[\"Trestle-Bot\"]\n    Trestle_Bot --&gt; Compliance_Trestle[\"Compliance-Trestle SDK\"]\n    Compliance_Trestle --&gt; Git_Provider_API[\"Git Provider API\"]\n    Git_Provider_API --&gt; Branch[\"User's Git Branch\"]</code></pre>"},{"location":"workflows/create_diagrams/","title":"Diagrams: Create Content","text":""},{"location":"workflows/create_diagrams/#context","title":"Context","text":"<pre><code>graph LR\n    User[\"User\"] --&gt; Workflow_Dispatch[\"Workflow Dispatch\"]\n    Workflow_Dispatch --&gt; Trestle_Bot[\"Trestle-Bot\"]\n    Trestle_Bot --&gt; New_Branch[\"New Branch\"]\n    New_Branch --&gt; PR[\"Draft Pull Request\"]\n</code></pre>"},{"location":"workflows/create_diagrams/#container","title":"Container","text":"<pre><code>graph LR\n    User[\"User\"] --&gt; GH_Action[\"GitHub Action\"]\n    GH_Action --&gt; Trestle_Bot[\"Trestle-Bot\"]\n    Trestle_Bot --&gt; Compliance_Trestle[\"Compliance-Trestle SDK\"]\n    Compliance_Trestle --&gt; Git_Provider_API[\"Git Provider API\"]\n    Git_Provider_API --&gt; Branch[\"New Branch\"]\n    Branch --&gt; PR[\"Draft Pull Request\"]</code></pre>"}]}